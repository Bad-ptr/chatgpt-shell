ðŸ‘‰ [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]

* chatgpt-shell

ChatGPT and DALL-E Emacs shells + [[https://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]].

Includes =shell-maker=, a way to create shells for any service (local or cloud).

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/chatgpt-shell-demo.gif" width="80%" />

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/blocks.gif" width="80%" />

** Note

This is very much an experimental proof of concept, possibly incomplete, or maybe with some rough edges. Pull requests with improvements or fixes totally welcome.

* Install

- Load =(require 'chatgpt-shell)=
- Load =(require 'dall-e-shell)=

* Set OpenAI key

You'll first need to get a [[https://platform.openai.com/account/api-keys][key from OpenAI]].

** ChatGPT key
*** As function
#+begin_src emacs-lisp
  ;; if you are using the "pass" password manager
  (setq chatgpt-shell-openai-key
        (lambda ()
          ;; (auth-source-pass-get 'secret "openai-key") ; alternative using pass support in auth-sources
          (nth 0 (process-lines "pass" "show" "openai-key"))))

  ;; or if using auth-sources, e.g., so the file ~/.authinfo has this line:
  ;;  machine api.openai.com password OPENAI_KEY
  (setq chatgpt-shell-openai-key
        (auth-source-pick-first-password :host "api.openai.com"))

  ;; or same as previous but lazy loaded (prevents unexpected passphrase prompt)
  (setq chatgpt-shell-openai-key
        (lambda ()
          (auth-source-pick-first-password :host "api.openai.com")))
#+end_src

*** Manually
=M-x set-variable chatgpt-shell-openai-key=

*** As variable
#+begin_src emacs-lisp
  (setq chatgpt-shell-openai-key "my key")
#+end_src

** DALL-E key

Same as ChatGPT, but use =dall-e-shell-openai-key= variable.

* Launch

Launch with =M-x chatgpt-shell= or =dall-e-shell=.

* Clear buffer

Type =clear= as a prompt.

#+begin_src sh
  ChatGPT> clear
#+end_src

Alternatively, use either =M-x chatgpt-shell-clear-buffer= or =M-x comint-clear-buffer=.

* Saving and restoring (experimental)

Save with =M-x shell-maker-save-session-transcript= and restore with =M-x chatgpt-shell-restore-session-from-transcript=.

* Streaming
=(setq chatgpt-shell-streaming t)= enables/disables streaming.

* Explain code in region

=M-x chatgpt-shell-explain-code=

There are other functions to act on region. Browse all available via =M-x=.

* ChatGPT org babel

Load =(require 'ob-chatgpt-shell)= and invoke =(ob-chatgpt-shell-setup)=.

#+begin_src org
  ,#+begin_src chatgpt-shell
    Hello
  ,#+end_src

  ,#+RESULTS:
  : Hi there! How can I assist you today?
#+end_src

* DALL-E org babel

Load =(require 'ob-dall-e-shell)= and invoke =(ob-dall-e-shell-setup)=.

#+begin_src org
  ,#+begin_src dall-e-shell
    Pretty clouds
  ,#+end_src

  ,#+RESULTS:
  [[file:/var/folders/m7/ky091cp56d5g68nyhl4y7frc0000gn/T/1680644778.png]]
#+end_src

* Customizations

|------------------------------------+---------------------------------------------------------------------------|
| chatgpt-shell-default-prompts      | List of prompts to choose from in the minibuffer.                         |
| chatgpt-shell-model-version        | The used ChatGPT OpenAI model.                                            |
| chatgpt-shell-streaming            | Whether or not to stream ChatGPT responses (experimental).                |
| chatgpt-shell-system-prompt        | The system message helps set the behavior of the assistant.               |
| chatgpt-shell-language-mapping     | Maps external language names to Emacs names.                              |
| chatgpt-shell-model-temperature    | What sampling temperature to use, between 0 and 2, or nil.                |
| chatgpt-shell-openai-key           | OpenAI key as a string or a function that loads and returns it.           |
| chatgpt-shell-request-timeout      | How long to wait for a request to time out.                               |
| chatgpt-shell-display-function     | Function to display new shell. Can be set to `display-buffer' or similar. |
| chatgpt-shell-read-string-function | Function to read strings from user.                                       |
| chatgpt-shell-on-response-function | Function to automatically execute after last command output.              |
| dall-e-shell-openai-key            | OpenAI key as a string or a function that loads and returns it.           |
| dall-e-image-size                  | The default size of the requested image as a string.                      |
| dall-e-model-version               | The used DALL-E OpenAI model.                                             |

There are more. Browse via =M-x set-variable=

* Commands

|----------------------------------------------------+--------------------------------------------------------|
| dall-e-shell                                       | Start a DALL-E shell.                                  |
| chatgpt-shell                                      | Start a ChatGPT shell.                                 |
| chatgpt-shell-prompt                               | Make a ChatGPT request from the minibuffer.            |
| chatgpt-shell-describe-code                        | Describe code from region using ChatGPT.               |
| chatgpt-shell-eshell-summarize-last-command-output | Ask ChatGPT to summarize the last command output.      |
| chatgpt-shell-eshell-whats-wrong-with-last-command | Ask ChatGPT what's wrong with the last eshell command. |
| chatgpt-shell-mark-output                          | Mark last or current output.                           |
| chatgpt-shell-restore-session-from-transcript      | Restore session from transcript.                       |
| chatgpt-shell-save-session-transcript              | Save shell transcript to file.                         |
| chatgpt-shell-send-and-review-region               | Send region to ChatGPT, review before submitting.      |
| chatgpt-shell-send-region                          | Send region to ChatGPT.                                |

There are more. Browse all available via =M-x=.

* shell-maker

There are currently two shell implementations (ChatGPT and DALL-E). Other services (local or cloud) can be brought to Emacs as shells. =shell-maker= can help with that.

=shell-maker= is a convenience wrapper around [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html][comint mode]].

Both =chatgpt-shell= and =dall-e-shell= use =shell-maker=, but a basic implementation of a new shell looks as follows:

#+begin_src emacs-lisp :lexical no
  (require 'shell-maker)

  (defvar greeter-shell--config
    (make-shell-maker-config
     :name "Greeter"
     :execute-command
     (lambda (command _history callback error-callback)
       (funcall callback
                (format "Hello \"%s\"" command)
                nil))))

  (defun greeter-shell ()
    "Start a Greeter shell."
    (interactive)
    (shell-maker-start greeter-shell--config))
#+end_src

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/greeter.gif" width="50%" />

* Other packages

ðŸ‘‰ [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]

- [[https://xenodium.com/][Blog (xenodium.com)]]
- [[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]]
- [[https://github.com/xenodium/company-org-block][company-org-block]]
- [[https://github.com/xenodium/org-block-capf][org-block-capf]]
- [[https://github.com/xenodium/ob-swiftui][ob-swiftui]]
